$ sudo mkdir -p /etc/docker/ssl
$ mkdir -p ~/.docker

*** First run openssl to create and sign a CA key and certificate and copy the CA certificate into /etc/docker/ssl:
$ openssl genrsa -out ~/.docker/ca-key.pem 2048
$ ls ~/.docker/
$ sudo cp ~/.docker/ca.pem /etc/docker/ssl

*** Next we’ll need an openssl configuration file for the Docker client ~/.docker/openssl.cnf:
[req]
req_extensions = v3_req
distinguished_name = req_distinguished_name
[req_distinguished_name]
[ v3_req ]
basicConstraints = CA:FALSE
keyUsage = nonRepudiation, digitalSignature, keyEncipherment
extendedKeyUsage = serverAuth, clientAuth

*** Followed by a configuration file for the Docker server /etc/docker/ssl/openssl.cnf
[req]
req_extensions = v3_req
distinguished_name = req_distinguished_name
[req_distinguished_name]
[ v3_req ]
basicConstraints = CA:FALSE
keyUsage = nonRepudiation, digitalSignature, keyEncipherment
extendedKeyUsage = serverAuth, clientAuth
subjectAltName = @alt_names

[alt_names]
DNS.1 = docker.local
IP.1 = 172.17.8.101
IP.2 = 127.0.0.1

*** Next create and sign a certificate for the client:
$ openssl genrsa -out ~/.docker/key.pem 2048
$ openssl req -new -key ~/.docker/key.pem -out ~/.docker/cert.csr \
    -subj '/CN=docker-client' -config ~/.docker/openssl.cnf
$ openssl x509 -req -in ~/.docker/cert.csr -CA ~/.docker/ca.pem \
    -CAkey ~/.docker/ca-key.pem -CAcreateserial \
    -out ~/.docker/cert.pem -days 365 -extensions v3_req \
    -extfile ~/.docker/openssl.cnf

*** Then do the same for the server:
$ sudo openssl genrsa -out /etc/docker/ssl/key.pem 2048
$ sudo openssl req -new -key /etc/docker/ssl/key.pem \
    -out /etc/docker/ssl/cert.csr \
    -subj '/CN=docker-server' -config /etc/docker/ssl/openssl.cnf
$ sudo openssl x509 -req -in /etc/docker/ssl/cert.csr -CA ~/.docker/ca.pem \
    -CAkey ~/.docker/ca-key.pem -CAcreateserial \
    -out /etc/docker/ssl/cert.pem -days 365 -extensions v3_req \
    -extfile /etc/docker/ssl/openssl.cnf


************************************************************ Using OMGWTFSSL Image *************************
$ docker run --rm -v $(pwd)/.docker:/certs \
    paulczar/omgwtfssl

$ sudo cp ~/.docker/ca.pem /etc/docker/ssl/ca.pem
$ chown -R $USER ~/.docker
$ docker run --rm -v /etc/docker/ssl:/server \
    -v $(pwd)/.docker:/certs \
    -e SSL_IP=127.0.0.1,172.17.8.101 \
    -e SSL_DNS=docker.local -e SSL_KEY=/server/key.pem \
    -e SSL_CERT=/server/cert.pem paulczar/omgwtfssl

********************************************************** Using the TLS certificates with Docker *************
*** Create the file custom.conf in /etc/systemd/system/docker.service.d/:
*** If you want to restrict local users from using the docker unix socket remove the second -H command line option, 
*** if you already have a custom drop in unit you can add the -H and –tls* arguments to it.

[Service]
Environment="DOCKER_OPTS=-H=0.0.0.0:2376 -H unix:///var/run/docker.sock --tlsverify --tlscacert=/etc/docker/ssl/ca.pem --tlscert=/etc/docker/ssl/cert.pem --tlskey=/etc/docker/ssl/key.pem"
$ sudo systemctl daemon-reload
$ sudo systemctl restart docker

*** Now when you try to access Docker via the TCP port you should get a TLS error:
$ docker -H tcp://127.0.0.1:2376 info
Get http://127.0.0.1:2376/v1.21/containers/json: malformed HTTP response "\x15\x03\x01\x00\x02\x02".
* Are you trying to connect to a TLS-enabled daemon without TLS?

*** We can set some environment variables to enable TLS for the client and use the client key we created:
$ export DOCKER_HOST=tcp://127.0.0.1:2376
$ export DOCKER_TLS_VERIFY=1
$ export DOCKER_CERT_PATH=~/.docker
$ docker info

***************************************************** Using the TLS certificates with Docker Swarm

To secure Docker Swarm using these TLS certificates you will need to create TLS certificate/key pairs for each server using the same CA.

to add some arguments to the docker run command that you start Swarm Manager with the following:

$ docker run -d --name swarm-manager \
    -v /etc/docker/ssl:/etc/docker/ssl \
    --net=host swarm:latest manage \
    --tlsverify \
    --tlscacert=/etc/docker/ssl/ca.pem \
    --tlscert=/etc/docker/ssl/cert.pem \
    --tlskey=/etc/docker/ssl/key.pem \
    etcd://127.0.0.1:2379

Which you can then access using the docker client:

$ export DOCKER_HOST=tcp://127.0.0.1:2375
$ export DOCKER_TLS_VERIFY=1
$ export DOCKER_CERT_PATH=~/.docker

$ docker info